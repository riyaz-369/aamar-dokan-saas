generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// user model
model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String?  @unique // Optional email field
  phone      String   @unique
  username   String   @unique
  password   String
  type       UserType // Enum for user type
  status     Status   @default(Active)
  photo      String?
  permission Json?
  blog       Blog[]

  @@index([phone, email, username])
}

// Define your Customer model
model Client {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  phone           String   @unique
  email           String?
  street          String?
  city            String?
  state           String?
  zip             String?
  country         String?
  photo           String?
  username        String?
  password        String
  dob             String?
  isPhoneVerified Boolean?
  status          Status   @default(Active)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  aamardokanId    String   @unique
  services        Json?
  // payment      Payment[]

  @@index([phone, email, username, aamardokanId])
}

//Services model
model Services {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  slug          String
  code          String
  tos           String?
  meta          Json?
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String    @db.ObjectId
  photo         String?
  privacyPolicy String?
  status        Status    @default(Active)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  packages      Package[]
  // payment       Payment[]

  @@index([title, code])
}

model Package {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  subtitle  String?
  code      String
  features  Json // maintains a list of ordered
  service   Services @relation(fields: [serviceId], references: [id])
  custom    Boolean  @default(false)
  price     Json // type: (monthly, weekly)
  serviceId String   @db.ObjectId
  status    Status   @default(Active)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Blog model
model Blog {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String
  tags          String?
  meta          Json?
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String    @db.ObjectId
  packages      Json?
  photo         String?
  content       String?
  publishDate   DateTime?
  privacyPolicy String?
  status        Status    @default(Active)
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?   @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([title])
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  meta        Json?
  photo       String?
  description String?
  status      Status     @default(Active)
  blogs       Blog[]
  services    Services[]
}

// Payment model
model Payment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  paymentID     String?
  method        String
  amount        Json?
  month         String?
  tags          String?
  packages      Json[] //{street, city, state, zip, country}
  photo         String?
  content       String?
  date          DateTime?
  status        Status    @default(Active)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // client        Client    @relation(fields: [clientId], references: [id])
  // clientId      String    @db.ObjectId
  // services      Services  @relation(fields: [serviceId], references: [id])
  // serviceId     String    @db.ObjectId
  transactionId String?

  @@index([paymentID, transactionId])
}

enum UserType {
  Admin
  Manager
  CustomerSupport
}

enum Status {
  Active
  Inactive
}
