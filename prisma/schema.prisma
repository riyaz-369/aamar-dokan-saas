generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model PaymentTokens {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  aamardokanId String   @unique
  method       String
  idToken      String?
  refreshToken String?
  expiresIn    Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// user model
model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String?  @unique // Optional email field
  phone      String   @unique
  username   String   @unique
  password   String
  type       UserType // Enum for user type
  status     Status   @default(Active)
  photo      String?
  permission Json?
  blog       Blog[]

  @@index([phone, email, username])
}

// Define your Customer model
model Client {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  phone           String        @unique
  email           String?
  gender          Gender?
  street          String?
  city            String?
  state           String?
  zip             String?
  country         String?
  photo           String?
  username        String?
  password        String
  dob             DateTime?
  isPhoneVerified Boolean?
  status          Status        @default(Active)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  aamardokanId    String        @unique
  services        Json[]
  orders          Orders[]
  transactions    Transaction[]

  @@index([phone, email, username, aamardokanId])
}

//Services model
model Services {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  slug          String        @unique
  code          String
  tos           String?
  meta          Json?
  category      Category      @relation(fields: [categoryId], references: [id])
  categoryId    String        @db.ObjectId
  photo         String?
  privacyPolicy String?
  apiUrl        String?
  loginUrl      String?
  status        ServiceStatus @default(Active)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  packages      Package[]
  orders        Orders[]

  @@index([title, code, slug])
}

model Package {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subtitle    String?
  code        String
  features    Json // maintains a list of ordered
  service     Services @relation(fields: [serviceId], references: [id])
  serviceId   String   @db.ObjectId
  custom      Boolean  @default(false)
  isFree      Boolean? @default(false)
  price       Json // type: (monthly, weekly)
  trialPeriod Int?     @default(0)
  status      Status   @default(Active)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Orders[]
}

// Blog model
model Blog {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String
  tags          String?
  meta          Json?
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String    @db.ObjectId
  packages      Json?
  photo         String?
  content       String?
  publishDate   DateTime?
  privacyPolicy String?
  status        Status    @default(Active)
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?   @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([title])
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  meta        Json?
  photo       String?
  description String?
  status      Status     @default(Active)
  blogs       Blog[]
  services    Services[]
}

model Orders {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  aamardokanId  String
  orderId       String             @unique
  client        Client             @relation(fields: [clientId], references: [id])
  clientId      String             @db.ObjectId
  service       Services           @relation(fields: [serviceId], references: [id])
  serviceId     String             @db.ObjectId
  package       Package            @relation(fields: [packageId], references: [id])
  packageId     String             @db.ObjectId
  status        OrderStatus        @default(Ordered)
  paymentStatus PaymentStatus      @default(Unpaid)
  amount        Int                @default(0)
  paymentTerms  paymentTermsStatus @default(Monthly)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  transaction   Transaction[]

  @@index([aamardokanId, orderId])
}

model Transaction {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  client                Client            @relation(fields: [clientId], references: [id])
  clientId              String            @db.ObjectId
  order                 Orders            @relation(fields: [orderId], references: [id])
  orderId               String            @db.ObjectId
  aamardokanId          String
  paymentId             String?
  method                String?
  amount                Int               @default(0)
  currency              String
  transactionId         String?
  merchantInvoiceNumber String?
  payerAccount          String
  customerMsisdn        String?
  transactionStatus     TransactionStatus
  statusMessage         String?
  paymentExecuteTime    String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([paymentId, transactionId])
}

model ContactUs {
  id      String               @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  phone   String
  email   String
  subject String?
  company String?
  message String
  status  ContactMessageStatus @default(Inbox)
}

enum ContactMessageStatus {
  Inbox
  Sent
  Read
  Unread
  Drafts
  Trash
  Archive
}

enum Gender {
  Male
  Female
  Other
}

enum PaymentStatus {
  Unpaid
  Paid
}

enum TransactionStatus {
  Completed
  Failed
  Canceled
}

enum UserType {
  Admin
  Manager
  CustomerSupport
}

enum Status {
  Active
  Inactive
}

enum ServiceStatus {
  Active
  Inactive
  ComingSoon
}

enum OrderStatus {
  Complete
  Failed
  Ordered
}

enum paymentTermsStatus {
  Monthly
  Yearly
  Free
}
