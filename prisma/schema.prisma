generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// user model
model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String?  @unique // Optional email field
  phone      String   @unique
  username   String   @unique
  password   String
  type       UserType // Enum for user type
  status     Status // Enum for user Status
  photo      String?
  permission Json?
  blog       Blog[]

  @@index([phone, email, username])
}

// Define your Customer model
model Client {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  phone        String   @unique
  email        String?
  address      Json? //{street, city, state, zip, country}
  photo        String?
  username     String?
  password     String
  dob          String?
  status       Status   @default(Active)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  aamardokanId String  @unique
  services     Json?
  // payment      Payment[]

  @@index([phone, email, username, aamardokanId])
}

//Services model
model Services {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String
  code          String
  meta          Json?
  category      String?
  packages      Json[] //{street, city, state, zip, country}
  photo         String?
  description   String?
  tos           String?
  privacyPolicy String?
  status        Status   @default(Active)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // payment       Payment[]

  @@index([title, code, category])
}

// Blog model
model Blog {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String
  meta          Json?
  category      String?
  tags          String?
  packages      Json[] //{street, city, state, zip, country}
  photo         String?
  content       String?
  publish       DateTime?
  privacyPolicy String?
  status        Status    @default(Active)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId

  @@index([title, category])
}

// Payment model
model Payment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  paymentID     String?
  method        String
  amount        Json?
  month         String?
  tags          String?
  packages      Json[] //{street, city, state, zip, country}
  photo         String?
  content       String?
  date          DateTime?
  status        Status    @default(Active)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // client        Client    @relation(fields: [clientId], references: [id])
  // clientId      String    @db.ObjectId
  // services      Services  @relation(fields: [serviceId], references: [id])
  // serviceId     String    @db.ObjectId
  transactionId String?

  @@index([paymentID, transactionId])
}

enum UserType {
  Admin
  Manager
  CustomerSupport
}

enum Status {
  Active
  Inactive
}